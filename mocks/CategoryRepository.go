// Code generated by mockery v2.37.1. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/alam/govtech/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// CategoryRepository is an autogenerated mock type for the CategoryRepository type
type CategoryRepository struct {
	mock.Mock
}

// GetCategory provides a mock function with given fields: ctx, id
func (_m *CategoryRepository) GetCategory(ctx context.Context, id int64) (model.Category, error) {
	ret := _m.Called(ctx, id)

	var r0 model.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (model.Category, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) model.Category); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(model.Category)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCategoryRepository creates a new instance of CategoryRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCategoryRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CategoryRepository {
	mock := &CategoryRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
