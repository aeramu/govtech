// Code generated by mockery v2.37.1. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/alam/govtech/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// ProductReviewRepository is an autogenerated mock type for the ProductReviewRepository type
type ProductReviewRepository struct {
	mock.Mock
}

// GetReviewStatistic provides a mock function with given fields: ctx, productID
func (_m *ProductReviewRepository) GetReviewStatistic(ctx context.Context, productID int64) (model.Statistic, error) {
	ret := _m.Called(ctx, productID)

	var r0 model.Statistic
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (model.Statistic, error)); ok {
		return rf(ctx, productID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) model.Statistic); ok {
		r0 = rf(ctx, productID)
	} else {
		r0 = ret.Get(0).(model.Statistic)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertReview provides a mock function with given fields: ctx, review
func (_m *ProductReviewRepository) InsertReview(ctx context.Context, review model.ProductReview) error {
	ret := _m.Called(ctx, review)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.ProductReview) error); ok {
		r0 = rf(ctx, review)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewProductReviewRepository creates a new instance of ProductReviewRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductReviewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductReviewRepository {
	mock := &ProductReviewRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
