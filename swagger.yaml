openapi: 3.0.3
info:
  title: GovTech Procurement Take Home Project
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
  version: 1.0.0
servers:
  - url: http://localhost:8080
tags:
  - name: Product
    description: Everything about product
paths:
  /products/{productId}:
    get:
      tags:
        - Product
      summary: Get product detail
      operationId: getProductById
      parameters:
        - name: productId
          in: path
          description: ID of product to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid request
        '404':
          description: Data not found
    put:
      tags:
        - Product
      summary: Update product detail
      operationId: updateProductById
      parameters:
        - name: productId
          in: path
          description: ID of product to return
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                sku:
                  type: string
                  example: IND003
                title:
                  type: string
                  example: Pototo Keju
                description:
                  type: string
                  example: Makanan ringan rasa keju
                category:
                  $ref: '#/components/schemas/Category'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid request
        '404':
          description: Data not found
  /products:
    get:
      tags:
        - Product
      summary: Get product list
      operationId: getProducts
      parameters:
        - name: page
          in: query
          description: Filter product page
          required: false
          schema:
            type: integer
        - name: size
          in: query
          description: pagination size
          required: false
          schema:
            type: integer
        - name: search
          in: query
          description: Filter product sku or title by keyword
          required: false
          explode: true
          schema:
            type: string
        - name: category
          in: query
          description: Filter product by category ID
          required: false
          explode: true
          schema:
            type: integer
        - name: sort
          in: query
          description: Sort by column
          required: false
          explode: true
          schema:
            type: string
            enum:
              - created_at
              - rating
        - name: sort_type
          in: query
          description: Sort type
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '400':
          description: Invalid request
        '404':
          description: Data not found
    post:
      tags:
        - Product
      summary: Create product
      operationId: createProduct
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid request
        '404':
          description: Data not found
  /products/{productId}/action/review:
    post:
      tags:
        - Product
      summary: Give review to product
      operationId: rateProductById
      parameters:
        - name: productId
          in: path
          description: ID of the product that will be rated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Give review to the product
        content:
          application/json:
            schema:
              type: object
              properties:
                rating:
                  type: integer
                  example: 4
                comment:
                  type: string
                  example: taste good!!!
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid request
        '404':
          description: Data not found
components:
  schemas:
    Product:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        sku:
          type: string
          example: IND003
        title:
          type: string
          example: Pototo Keju
        description:
          type: string
          example: Makanan ringan rasa keju
        category:
          $ref: '#/components/schemas/Category'
        imageUrl:
          type: string
          example: https://foo.bar/pictures/ind-003-pic.jpg
        weight:
          type: integer
          format: int64
          example: 1
        price:
          type: integer
          format: int64
          example: 10000
        rating:
          type: integer
          example: 4
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Food
    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true